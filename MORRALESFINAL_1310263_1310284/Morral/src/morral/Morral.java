/*
 Proyecto morral.
 Integrantes:
 Maria Alejandra Pabon Salazar 1310263
 Mayerly Suarez Ordoñez        1310284
 */

/*
 *Proposito: 
 */
package morral;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import lpsolve.LpSolveException;

public class Morral extends javax.swing.JFrame {

    /*Variables globales*/
    int numeroCajas = 0;
    double[] pesosCajas = null;
    double[] volumenesCajas = null;
    int[] numerosCaja = null;
    double pesoMorral = 0;
    double volumenMorral = 0;

    DefaultTableModel modelMorral;
    DefaultTableModel modelCaja;
    DefaultTableModel modelResultado;
    DefaultTableModel modelResultado2;

    int[] morrales = null;
    int[] morrales2 = null;
    String[] cajasEnMorrales = null;
    String[] cajasEnMorrales2 = null;
    double valorFO = 0;
    int tamanoArregloResultado = 0;
    int tamanoArregloResultado2 = 0;
    //Arreglos donde cada pos es una columna de la tabla
    String datosResultado[] = null;
    String datosResultado2[] = null;
    //arreglos que guardan lo que devuelve modelar() de la clase Modelo y Modelo2
    String resultadoModelo[] = null;
    String resultadoModelo2[] = null;

    //Arreglo que guarda en cada pos la cadena de la distribucion de cajas en el morral de pos i+1. Para calcular abs
    String ordenMorrales[] = null;
    String ordenMorrales2[] = null;
    int indiceordenMorrales = 0;
    int indiceordenMorrales2 = 0;
    //Para calcular los valores de abs  y mandarselo a la clase que construye el modelo 2
    int pesoTotalMorral1 = 0;
    int diferencias[] = null;//arreglo que almacena (cada diferencia del peso del morral 1 con el morral igual a numero de pos)= (cada abs)

    /*Constructor*/
    @SuppressWarnings("empty-statement")
    public Morral() {

        initComponents();
        this.setTitle("Optimizacion Morrales");
        centrar_datos();
        modelMorral = (DefaultTableModel) tablaMorral.getModel();
        modelCaja = (DefaultTableModel) tablaCaja.getModel();
        modelResultado = (DefaultTableModel) tablaResultado.getModel();
        modelResultado2 = (DefaultTableModel) tablaResultado2.getModel();

    }

    public void centrar_datos() {

        DefaultTableCellRenderer modelocentrar = new DefaultTableCellRenderer();
        modelocentrar.setHorizontalAlignment(SwingConstants.CENTER);
        tablaCaja.getColumnModel().getColumn(0).setCellRenderer(modelocentrar);
        tablaCaja.getColumnModel().getColumn(1).setCellRenderer(modelocentrar);
        tablaCaja.getColumnModel().getColumn(2).setCellRenderer(modelocentrar);
        tablaMorral.getColumnModel().getColumn(0).setCellRenderer(modelocentrar);
        tablaMorral.getColumnModel().getColumn(1).setCellRenderer(modelocentrar);
        tablaMorral.getColumnModel().getColumn(2).setCellRenderer(modelocentrar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rutArchivo = new javax.swing.JTextField();
        examinarArchivo = new javax.swing.JButton();
        Calcular = new javax.swing.JButton();
        funcionobjetivolabel = new javax.swing.JLabel();
        resultado = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        resultiempoejecucion2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tiempoejecucionlabel1 = new javax.swing.JLabel();
        limpiarTabla = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tiempoejecucionlabel2 = new javax.swing.JLabel();
        resultiempoejecucion1 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCaja = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaResultado = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaMorral = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaResultado2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulacion ascensor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Problema Morrales");

        rutArchivo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        examinarArchivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        examinarArchivo.setText("Examinar");
        examinarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examinarArchivoActionPerformed(evt);
            }
        });

        Calcular.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Calcular.setText("Calcular");
        Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcularActionPerformed(evt);
            }
        });

        funcionobjetivolabel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        funcionobjetivolabel.setForeground(new java.awt.Color(102, 102, 102));
        funcionobjetivolabel.setText("Total minimo de personas");
        funcionobjetivolabel.setToolTipText("Total minimo de morrales");

        resultado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Datos Cajas");

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Datos Morral");

        resultiempoejecucion2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Distribución de las cajas en los morrales");

        tiempoejecucionlabel1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        tiempoejecucionlabel1.setForeground(new java.awt.Color(102, 102, 102));
        tiempoejecucionlabel1.setText("Tiempo de ejecucion");

        limpiarTabla.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        limpiarTabla.setText("Limpiar datos");
        limpiarTabla.setToolTipText("Limpiar una fila de las tablas");
        limpiarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Distribución equilibrada de las cajas en los morrales");

        tiempoejecucionlabel2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        tiempoejecucionlabel2.setForeground(new java.awt.Color(102, 102, 102));
        tiempoejecucionlabel2.setText("Tiempo de ejecucion");

        resultiempoejecucion1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        tablaCaja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº", "Peso", "Volumen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCaja.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaCaja);
        if (tablaCaja.getColumnModel().getColumnCount() > 0) {
            tablaCaja.getColumnModel().getColumn(0).setResizable(false);
            tablaCaja.getColumnModel().getColumn(1).setResizable(false);
            tablaCaja.getColumnModel().getColumn(2).setResizable(false);
        }

        jScrollPane5.setViewportView(jScrollPane1);

        tablaResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Morral", "Cajas", "Peso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResultado.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tablaResultado);
        if (tablaResultado.getColumnModel().getColumnCount() > 0) {
            tablaResultado.getColumnModel().getColumn(0).setResizable(false);
            tablaResultado.getColumnModel().getColumn(1).setResizable(false);
            tablaResultado.getColumnModel().getColumn(2).setResizable(false);
        }

        jScrollPane6.setViewportView(jScrollPane4);

        tablaMorral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero Cajas", "Peso", "Volumen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMorral.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaMorral);
        if (tablaMorral.getColumnModel().getColumnCount() > 0) {
            tablaMorral.getColumnModel().getColumn(0).setResizable(false);
            tablaMorral.getColumnModel().getColumn(1).setResizable(false);
            tablaMorral.getColumnModel().getColumn(2).setResizable(false);
        }

        jScrollPane7.setViewportView(jScrollPane2);

        tablaResultado2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Morral", "Cajas", "Peso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResultado2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaResultado2);
        if (tablaResultado2.getColumnModel().getColumnCount() > 0) {
            tablaResultado2.getColumnModel().getColumn(0).setResizable(false);
            tablaResultado2.getColumnModel().getColumn(1).setResizable(false);
            tablaResultado2.getColumnModel().getColumn(2).setResizable(false);
        }

        jScrollPane8.setViewportView(jScrollPane3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(limpiarTabla)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Calcular))
                                    .addComponent(jScrollPane7))
                                .addContainerGap())))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(funcionobjetivolabel)
                                .addGap(41, 41, 41)
                                .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tiempoejecucionlabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resultiempoejecucion2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(0, 296, Short.MAX_VALUE)
                                .addComponent(rutArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(examinarArchivo)
                                .addGap(320, 320, 320))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tiempoejecucionlabel1)
                                .addGap(18, 18, 18)
                                .addComponent(resultiempoejecucion1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rutArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examinarArchivo))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(resultiempoejecucion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tiempoejecucionlabel1)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Calcular)
                            .addComponent(limpiarTabla))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcionobjetivolabel)
                    .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tiempoejecucionlabel2)
                    .addComponent(resultiempoejecucion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcularActionPerformed

        //MODELO 1******************************************************************
        ejecutarModelo1();
        //MODELO 2******************************************************************
        ejecutarModelo2();


    }//GEN-LAST:event_CalcularActionPerformed

    private void ejecutarModelo1() {

        //Ejecutar modelo 1 
        Modelo modelo = new Modelo(numeroCajas, volumenesCajas, pesosCajas, volumenMorral, pesoMorral);
        try {
            resultadoModelo = modelo.modelar();
        } catch (LpSolveException ex) {
            Logger.getLogger(Morral.class.getName()).log(Level.SEVERE, null, ex);
        }
//        for (int i=0; i < resultadoModelo.length;i++){
//        System.out.println("RESULTADO MODELO 1" + resultadoModelo[i]);
//        }

        //******************************************************************
        //Llenear las tabla 1 solo si el modelo 1 devuelve algo
        if (resultadoModelo != null) {

            //Agregar a tabla 1 de resultados los morrales con sus cajas del modelo 1
            //resultadoModelo[0]=tamaño del arreglo resultado
            //resultadoModelo[1]=valor funcion objetivo
            //resultadoModelo[2 en adelante]=resultado de variables que me dice distribucion de cajas
            this.tamanoArregloResultado = Integer.parseInt(resultadoModelo[0]);
            this.valorFO = Double.parseDouble(resultadoModelo[1]);
            this.resultiempoejecucion1.setText(Double.toString(modelo.getResultadoTiempoEjecucion() / 1000) + "s");
            this.ordenMorrales = new String[(int) valorFO];//arreglo de abs
            this.morrales = new int[tamanoArregloResultado];
            this.cajasEnMorrales = new String[tamanoArregloResultado];

            //System.out.println("TAMAÑO ARREGLO CAJAS EN MORRALES " + cajasEnMorrales.length);
            datosResultado = new String[3];//arreglo donde cada posicion es la columna de la tabla 1
            int nummorral = 0;//contador que itera entre los morrales

            for (int j = 2; j < tamanoArregloResultado; j++) {
                this.morrales[nummorral] = nummorral + 1;
                datosResultado[0] = Integer.toString(this.morrales[nummorral]);//pos 0 de datosResultado corresponde a la columna de numeros de morrales
                this.cajasEnMorrales[j] = resultadoModelo[j];
                if (!"".equals(cajasEnMorrales[j])) {

                    //Almacenar cadena de cajas en la pos del morral donde morral1=pos0
                    ordenMorrales[indiceordenMorrales] = this.cajasEnMorrales[j];
                    datosResultado[2] = Integer.toString(calcularPesoMorral(ordenMorrales[indiceordenMorrales]));
                    //System.out.println("Arreglo orden Morrales " + ordenMorrales[indiceordenMorrales]);

                    //Agregar datos de la columan 1 de la tabla de distribucion de cajas segun modelo 1
                    datosResultado[1] = this.cajasEnMorrales[j];//pos 1 de datosResultado contiene la cadena con las cajas distribuidas                                        
                    modelResultado.addRow(datosResultado);//agrega la fila con el numerol morral y la lista de cajas dentro del morral

                    indiceordenMorrales++;
                    nummorral++;

                }

            }

            pesoTotalMorral1 = calcularPesoMorral(ordenMorrales[0]);
            diferencias = new int[(int) valorFO];//arreglo que almacena (cada diferencia del peso del morral 1 con el morral igual a numero de pos)= (cada abs)

            //Calcular los valores de abs  y mandarselo a la clase que construye el MODELO 2
            for (int i = 0; i < diferencias.length; i++) {

                if (diferencias.length == 1) {
                    diferencias[i] = Math.abs(pesoTotalMorral1);

                    //System.out.println("Arreglo morrales " + ordenMorrales[i] + "Arreglo Constantes Diferencias " + diferencias[i]);
                    //System.out.println("DIFERENCIAS " + diferencias[i]);
                } else if (i != (diferencias.length - 1)) {
                    diferencias[i] = Math.abs(pesoTotalMorral1 - calcularPesoMorral(ordenMorrales[i + 1]));
                    //System.out.println("Arreglo morrales " + ordenMorrales[i] + "Arreglo Constantes Diferencias " + diferencias[i]);
                    //System.out.println("DIFERENCIAS " + diferencias[i]);
                }
            }
        }

        //Mostrar resultado de f.o del modelo 1
        resultado.setText(resultadoModelo[1]);

    }

    private void ejecutarModelo2() {

        //Penultimo parametro que se manda es el resultado del modelo 1, igual a la f.o del modelo 1, es decir la cantidad de morrales
        //Ultimo parametro que se manda es el arreglo de abs
        Modelo2 modelo2 = new Modelo2(numeroCajas, volumenesCajas, pesosCajas, volumenMorral, pesoMorral, Double.parseDouble(resultadoModelo[1]), diferencias);

        try {
            resultadoModelo2 = modelo2.modelar();
        } catch (LpSolveException ex) {
            Logger.getLogger(Morral.class.getName()).log(Level.SEVERE, null, ex);
        }
//        for (int i=0; i < resultadoModelo2.length;i++){
//        System.out.println("RESULTADO MODELO 2 " + resultadoModelo2[i]);
//        }
        //******************************************************************
        //Llenar la tabla 2 solo si el modelo 2 devuelve algo
        if (resultadoModelo2 != null) {

            //Agregar a tabla 2 de resultados los morrales con sus cajas de l modelo 2
            //resultadoModelo2[0]=tamaño del arreglo
            //resultadoModelo2[1]=valor funcion objetivo
            //resultadoModelo2[2 en adelante]=resultado de variables que me dice distribucion de cajas
            tamanoArregloResultado2 = Integer.parseInt(resultadoModelo2[0]);
            System.out.println("TAMAÑO RESULTADO 2 " + tamanoArregloResultado2);
            this.resultiempoejecucion2.setText(Double.toString(modelo2.getResultadoTiempoEjecucion() / 1000) + "s");
            this.ordenMorrales = new String[(int) Double.parseDouble(resultadoModelo[1])];//arreglo de abs            
            this.morrales2 = new int[tamanoArregloResultado2];
            this.cajasEnMorrales2 = new String[tamanoArregloResultado2];
            datosResultado2 = new String[3];
            indiceordenMorrales = 0;

            int nummorral2 = 0;
            for (int j = 2; j < tamanoArregloResultado2; j++) {
                this.morrales2[nummorral2] = nummorral2 + 1;
                datosResultado2[0] = Integer.toString(this.morrales2[nummorral2]);
                this.cajasEnMorrales2[j] = resultadoModelo2[j];
                if (!"".equals(cajasEnMorrales2[j])) {

                    //Almacenar cadena de cajas en la pos del morral donde morral1=pos0
                    ordenMorrales[indiceordenMorrales] = this.cajasEnMorrales2[j];
                    datosResultado2[2] = Integer.toString(calcularPesoMorral(ordenMorrales[indiceordenMorrales]));

                    //Agregar datos de la columan 1 de la tabla de distribucion de cajas segun modelo 1
                    datosResultado2[1] = this.cajasEnMorrales2[j];
                    datosResultado2[2] = Integer.toString(calcularPesoMorral(ordenMorrales[indiceordenMorrales]));
                    modelResultado2.addRow(datosResultado2);
                }
                indiceordenMorrales2++;
                nummorral2++;

            }
        }
    }

    private void examinarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examinarArchivoActionPerformed

        Double datosMorral[] = null;
        Double datosCaja[] = null;
        resultado.setText("");

        /*limpiar variables que se toma para mandar a modelo 2*/
        ordenMorrales = null;
        ordenMorrales2 = null;
        indiceordenMorrales = 0;
        indiceordenMorrales2 = 0;
        pesoTotalMorral1 = 0;
        diferencias = null;
        tamanoArregloResultado = 0;
        tamanoArregloResultado2 = 0;
        morrales = null;
        morrales2 = null;
        cajasEnMorrales = null;
        cajasEnMorrales2 = null;
        valorFO = 0;
        datosResultado = null;
        datosResultado2 = null;
        resultadoModelo = null;
        resultadoModelo2 = null;
        pesoTotalMorral1 = 0;
        /*Fin limpiar variables*/

        JFileChooser dialogo = new JFileChooser();
        int opcion = dialogo.showOpenDialog(this);

        if (opcion == JFileChooser.APPROVE_OPTION) {

            tablaCaja.removeAll();
            String ruta = dialogo.getSelectedFile().getPath();
            rutArchivo.setText(ruta);
            File archivo = dialogo.getSelectedFile();
            FileReader filer = null;
            BufferedReader buffer = null;

            try {
                filer = new FileReader(archivo);
                buffer = new BufferedReader(filer);

                //Leer y agregar datos  a la tabla del morral        
                datosMorral = new Double[3];
                datosCaja = new Double[3];

                this.numeroCajas = Integer.parseInt(buffer.readLine());
                datosMorral[0] = (double) this.numeroCajas;
                this.volumenMorral = Double.parseDouble(buffer.readLine());
                datosMorral[2] = this.volumenMorral;
                this.pesoMorral = Double.parseDouble(buffer.readLine());
                datosMorral[1] = this.pesoMorral;
                modelMorral.addRow(datosMorral);

                //Leer y agregar datos a la tabla de las cajas
                this.numerosCaja = new int[this.numeroCajas];
                this.pesosCajas = new double[(int) this.numeroCajas];
                this.volumenesCajas = new double[(int) this.numeroCajas];
                //System.out.println("Numero Cajas " + numeroCajas);
                for (int i = 0; i < (int) this.numeroCajas; i++) {

                    String datos = buffer.readLine();
                    String[] arregloDatos = datos.split(" ");

                    this.numerosCaja[i] = Integer.parseInt(arregloDatos[0]);
                    //System.out.println("Caja " + this.numerosCaja[i]);
                    datosCaja[0] = (double) this.numerosCaja[i];

                    this.pesosCajas[i] = Double.parseDouble(arregloDatos[2]);
                    //System.out.print("Peso caja " + this.pesosCajas[i] + " ");
                    datosCaja[1] = this.pesosCajas[i];

                    this.volumenesCajas[i] = Integer.parseInt(arregloDatos[1]);
                    //System.out.println("Volumen caja " + this.volumenesCajas[i] + " ");
                    datosCaja[2] = this.volumenesCajas[i];

                    modelCaja.addRow(datosCaja);

                }

            } catch (Exception e) {
                System.out.println(e.toString());
            }

        }

    }//GEN-LAST:event_examinarArchivoActionPerformed


    private void limpiarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaActionPerformed

        this.resultiempoejecucion1.setText("");
        this.resultiempoejecucion2.setText("");
        for (int x = 0; x < tablaMorral.getRowCount(); x++) {
            this.modelMorral.removeRow(x);

        }

        for (int x = 0; x < tablaCaja.getRowCount(); x++) {
            this.modelCaja.removeRow(x);

        }

        for (int x = 0; x < tablaResultado.getRowCount(); x++) {
            this.modelResultado.removeRow(x);

        }

        for (int x = 0; x < tablaResultado2.getRowCount(); x++) {
            this.modelResultado2.removeRow(x);

        }
        resultado.setText("");
        resultiempoejecucion2.setText("");
    }//GEN-LAST:event_limpiarTablaActionPerformed

    public static void main(String args[]) {

        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Morral.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Morral.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Morral.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Morral.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Morral().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Calcular;
    private javax.swing.JButton examinarArchivo;
    private javax.swing.JLabel funcionobjetivolabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JButton limpiarTabla;
    private javax.swing.JTextField resultado;
    private javax.swing.JTextField resultiempoejecucion1;
    private javax.swing.JTextField resultiempoejecucion2;
    private javax.swing.JTextField rutArchivo;
    private javax.swing.JTable tablaCaja;
    private javax.swing.JTable tablaMorral;
    private javax.swing.JTable tablaResultado;
    private javax.swing.JTable tablaResultado2;
    private javax.swing.JLabel tiempoejecucionlabel1;
    private javax.swing.JLabel tiempoejecucionlabel2;
    // End of variables declaration//GEN-END:variables

    public int calcularPesoMorral(String cajas) {
        double totalPesoMorral = 0;
        String cajasdeMorral[] = new String[numeroCajas];
        cajasdeMorral = cajas.split(";");
        for (int i = 0; i < cajasdeMorral.length; i++) {
            int numeroCaja = Integer.parseInt(cajasdeMorral[i].substring(5, cajasdeMorral[i].length()));
            totalPesoMorral += pesosCajas[numeroCaja - 1];
//            System.out.println("Arreglo cajas de Morral " + cajasdeMorral[i]
//                    + " Peso de caja " + numeroCaja + " = " +pesosCajas[numeroCaja-1]
//                    + " Peso total Morral " + totalPesoMorral
//          );

        }
        return (int) totalPesoMorral;
    }

}
